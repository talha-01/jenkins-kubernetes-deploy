AWSTemplateFormatVersion: 2010-09-09
Description: |
  This Cloudformation Template creates a Kubernetes Cluster on Ubuntu 20.04 of EC2 Instances and
  a Jenkins Server on Amazon Linux 2. Jenkins security group allows traffic from port 22 and 8080.
  Kubernetes cluster comprises of one master node and one worker node.
  Once the Master node is up and running, Worker node automatically joins the Cluster.
  Managers security group allows all protocols from all ports within itself and from the Workers.
  Workers security group allows all protocols from all ports within itself and from the Managers.
  Both Security groups allows SSH (22) connections from anywhere. Worker security group also allows
  port 30070, which is the port that the application will be using. User needs to select appropriate
  key name when launching the template.
Parameters:
  KeyPairName:
    Description: Enter the name of your Key Pair for SSH connections.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be one of the existing EC2 KeyPair
Resources:
  InstanceConnectPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument: #required
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2-instance-connect:SendSSHPublicKey
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition: {"StringEquals": {"ec2:osuser": "ubuntu"}}
          - Effect: Allow
            Action:
              - ec2:DescribeInstances
            Resource: "*"
  EC2InstanceConnect:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref InstanceConnectPolicy
  EC2ConnectProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles: #required
        - !Ref EC2InstanceConnect
  ManagersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH for Kube Masters
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WorkersSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH for Kube Workers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and open port 8080 for Jenkins server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  ManagersSGIngress1:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt ManagersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt ManagersSecurityGroup.GroupId
  ManagersSGIngress2:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt ManagersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt WorkersSecurityGroup.GroupId
  WorkersSGIngress1:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt WorkersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt WorkersSecurityGroup.GroupId
  WorkersSGIngress2:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt WorkersSecurityGroup.GroupId
      IpProtocol: -1 #required
      SourceSecurityGroupId: !GetAtt ManagersSecurityGroup.GroupId
  WorkersSGIngress3:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt WorkersSecurityGroup.GroupId
      IpProtocol: tcp #required
      FromPort: 30070
      ToPort: 30070
      CidrIp: 0.0.0.0/0
  JenkinsServer:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-0947d2ba12ee1ff75
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt JenkinsSecurityGroup.GroupId
      Tags:
        - 
          Key: Name
          Value: Jenkins Server for ${AWS::StackName}
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          yum update -y 
          wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat/jenkins.repo
          rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key
          yum install jenkins -y
          yum install java -y
          systemctl start jenkins
          yum install -y git
          amazon-linux-extras install docker -y
          service docker start
          service docker enable
          newgrp docker
          chmod 666 /var/run/docker.sock
  KubeMaster1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0758470213bdd23b1
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt ManagersSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Kube Master 1st on Ubuntu 20.04 of ${AWS::StackName}
      UserData: 
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            apt-get update -y
            apt-get upgrade -y
            hostnamectl set-hostname kube20-master
            apt install -y docker.io
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ubuntu
            newgrp docker
            apt install -y apt-transport-https
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
            apt update
            apt install -y kubelet kubeadm kubectl
            systemctl start kubelet
            systemctl enable kubelet
            kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU
            mkdir -p /home/ubuntu/.kube
            cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
            chown ubuntu:ubuntu /home/ubuntu/.kube/config
            cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            EOF
            sudo sysctl --system            
            su - ubuntu -c 'kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml'
  KubeWorker1:
    Type: AWS::EC2::Instance
    DependsOn:
      - KubeMaster1
    Properties:
      ImageId: ami-0758470213bdd23b1
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2ConnectProfile
      SecurityGroupIds:
        - !GetAtt WorkersSecurityGroup.GroupId
      Tags:                
        -                        
          Key: Name
          Value: !Sub Kube Worker 1st on Ubuntu 20.04 of ${AWS::StackName}
      UserData: 
        Fn::Base64: 
          !Sub |
            #! /bin/bash
            apt-get update -y
            apt-get upgrade -y
            hostnamectl set-hostname kube20-worker-1
            apt install -y docker.io
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ubuntu
            newgrp docker
            apt install -y apt-transport-https
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
            apt update
            apt install -y kubelet kubeadm kubectl
            systemctl start kubelet
            systemctl enable kubelet
            apt install -y python3-pip
            pip3 install ec2instanceconnectcli
            apt install -y mssh
            kubeadm join ${KubeMaster1.PrivateIp}:6443 --token $(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ${AWS::Region} ubuntu@${KubeMaster1} kubeadm token list | awk 'NR == 2 {print $1}') --discovery-token-ca-cert-hash sha256:$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ${AWS::Region} ubuntu@${KubeMaster1} openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')
            cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            EOF
            sudo sysctl --system
Outputs:
  1stKubeMasterPublicDNSName:
    Description: Kube Master 1st Public DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt KubeMaster1.PublicDnsName
  1stKubeMasterPrivateDNSName:
    Description: Kube Master 1st Private DNS Name
    Value: !Sub 
      - ${PrivateAddress}
      - PrivateAddress: !GetAtt KubeMaster1.PrivateDnsName
  1stKubeWorkerPublicDNSName:
    Description: Kube Worker 1st Public DNS Name
    Value: !Sub 
      - ${PublicAddress}
      - PublicAddress: !GetAtt KubeWorker1.PublicDnsName
  1stKubeWorkerPrivateDNSName:
    Description: Kube Worker 1st Private DNS Name
    Value: !Sub 
      - ${PrivateAddress}
      - PrivateAddress: !GetAtt KubeWorker1.PrivateDnsName
  JenkinsDNSName:
    Description: Jenkins server URL with port number
    Value: !Join [':', [!GetAtt  JenkinsServer.PublicIp, '8080']]
  ApplicationURL:
    Description: The Url which the application will be broadcast
    Value: !Join [':', [!GetAtt KubeWorker1.PublicIp, '30070']]

